<?php

namespace SID\Api\DrugBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use SID\Api\MovementBundle\Entity\Movimiento;
use SID\Api\MovementBundle\Entity\MovimientoFisico;
use SID\Api\SubstanceBundle\Entity\Droga;
use SID\Api\SubstanceBundle\Entity\UnidadMedida;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\File\UploadedFile;

/**
 * Stock
 *
 * @ORM\Table(name="stock")
 * @ORM\Entity(repositoryClass="SID\Api\DrugBundle\Repository\StockRepository")
 */
class Stock
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="marca", type="string", length=255)
     */
    private $marca;

    /**
     * @var int
     *
     * @ORM\Column(name="numeroEvnase",  type="string", length=255, nullable=true)
     */
    private $numeroEvnase;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="fechaVencimiento", type="date", nullable=true)
     */
    private $fechaVencimiento;

    /**
     * @var string
     *
     * @ORM\Column(name="lote", type="string", length=255, nullable=true)
     */
    private $lote;

    /**
     * @var string
     *
     * @ORM\Column(name="pesoBrutoActual", type="string", length=255, nullable=true)
     */
    private $pesoBrutoActual;

    /**
     * @var string
     *
     * @ORM\Column(name="imagen", type="blob", nullable=true)
     */
    private $imagen;

    /**
     * @var string
     *
     * @ORM\Column(name="imageMime", type="string", length=255, nullable=true)
     */
    private $imageMime;

    /**
     * @var int
     *
     * @ORM\Column(name="pesoBruto", type="integer")
     */
    private $pesoBruto;

    /**
     * @var string
     *
     * @ORM\Column(name="numeroProducto", type="string", length=255, nullable=true)
     */
    private $numeroProducto;

    /**
     * @var string
     *
     * @ORM\Column(name="numeroInterno", type="string", length=255, nullable=true)
     */
    private $numeroInterno;

    /**
     * @var int
     *
     * @ORM\Column(name="cantidad", type="float")
     */
    private $cantidad;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="fechaIngreso", type="datetime")
     */
    private $fechaIngreso;

    /**
     * @var int
     *
     * @ORM\Column(name="stockActual", type="integer")
     */
    private $stockActual;

    /**
     * Many Stocks have One Divition.
     * @ORM\ManyToOne(targetEntity="Division", inversedBy="stocks")
     * @ORM\JoinColumn(name="division_id", referencedColumnName="id")
     */
    private $division;

    /**
     * One Movement has Many Users.
     * @ORM\OneToMany(targetEntity="SID\Api\MovementBundle\Entity\Movimiento", mappedBy="stock")
     */
    private $movimientos;

    /**
     * One Movement has Many Users.
     * @ORM\OneToMany(targetEntity="SID\Api\MovementBundle\Entity\MovimientoFisico", mappedBy="stock")
     */
    private $extracciones;

    /**
     * Many Stocks have One Divition.
     * @ORM\ManyToOne(targetEntity="SID\Api\SubstanceBundle\Entity\Droga", inversedBy="stocks")
     * @ORM\JoinColumn(name="droga_id", referencedColumnName="id")
     */
    private $droga;

    /**
     * Many Stocks have One Calidad.
     * @ORM\ManyToOne(targetEntity="Calidad", inversedBy="stocks")
     * @ORM\JoinColumn(name="calidad_id", referencedColumnName="id")
     */
    private $calidad;

    /**
     * Many Stocks have One UnidadMedida.
     * @ORM\ManyToOne(targetEntity="SID\Api\SubstanceBundle\Entity\UnidadMedida", inversedBy="movimientos")
     * @ORM\JoinColumn(name="medida_id", referencedColumnName="id")
     */
    private $unidadMedida;



    /* $this->fechaIngreso = new \DateTime(); */


    /**
     * @return MovimientoFisico
     */
    public function getExtraccionActiva(){

        /* @var MovimientoFisico $extraccion */
        foreach ($this->extracciones as $extraccion) {
            if($extraccion->getHashta() == null)
                return $extraccion;
        }
    }

    /**
     * @return bool
     */
    public function isActive()
    {
        return $this->getExtraccionActiva() == null;
    }

    /**
     * @return string
     */
    function __toString()
    {
        return $this->getDroga()->__toString();
    }


    /**
     * @param UploadedFile $file
     * @return $this
     */
    public function setImageBlob($file)
    {
        if (!$file){
            $this->setImagen(null);
            $this->setImageMime(null);
            return $this;
        }
        if(!$file->isValid()){
            throw new FileException("Invalid File");
        }
        $imageFile    = fopen($file->getRealPath(), 'r');
        $imageContent = fread($imageFile, $file->getClientSize());
        fclose($imageFile);
        $this->setImagen($imageContent);
        $this->setImageMime($file->getMimeType());
        return $this;
    }
}
